     * [1]Home
     * [2]Mail
     * [3]News
     * [4]Sports
     * [5]Finance
     * [6]Weather
     * [7]Games
     * [8]Groups
     * [9]Answers
     * [10]Screen
     * [11]Flickr
     * [12]Mobile
     * [13]More

   ____________________ Search
   [14]My Apps [15]Sign in

Using Returned XML with VB.NET

   Once you have retrieved data from a web service you will need to do
   something with it. This HOWTO describes the various built-in methods
   .NET provides to use XML returned by a web service.
     * [16]Overview
     * [17]Returned Data to a String
     * [18]Using XmlReader
     * [19]Using XmlDocument
     * [20]Using XPathNavigator/XPathDocument
     * [21]Using a DataSet
     * [22]Further Reading

Overview

   The .NET Framework provides excellent support for XML. Combined with
   the databinding support of WinForms and ASP.NET applications you have
   an easy and powerful set of tools. ASP.NET 2.0 takes databinding
   another step further by providing the DataSource control which lets you
   declaratively provide data access to data-bound UI controls.

Returned Data to a String

   The simplest way to view the returned data is to get the response
   stream and put it into a string. This is especially handy for
   debugging. The following code gets a web page and returns the contents
   as a string.

VB.NET String Sample


   	Public Shared Function GetPageAsString(ByVal address As Uri
   ____________________________________________________________
   		Dim request As HttpWebRequest_____________________________
   		Dim response As HttpWebResponse = Nothing_________________
   		Dim reader As StreamReader________________________________
   		Dim result As String______________________________________
   ____________________________________________________________
   		Try_______________________________________________________
   			' Create the web request_________________________________
   			request = DirectCast(WebRequest.Create(address), HttpWebR
   ____________________________________________________________
   			' Get response___________________________________________
   			response = DirectCast(request.GetResponse(), HttpWebRespo
   ____________________________________________________________
   			' Get the response stream into a reader__________________
   			reader = New StreamReader(response.GetResponseStream())__
   ____________________________________________________________
   			' Read the whole contents and return as a string_________
   			result = reader.ReadToEnd()______________________________
   		Finally___________________________________________________
   			If Not response Is Nothing Then response.Close()_________
   		End Try___________________________________________________
   ____________________________________________________________
   		Return result_____________________________________________
   ____________________________________________________________
   	End Function_______________________________________________

Using XmlReader

   XmlReader provides fast forward-only access to XML data. It also allows
   you to read data as simple-typed values rather than strings. XmlReader
   can load an XML document without having to use HttpRequest, though you
   won't have the same amount of control over the request. If you use
   HttpRequest, you can just pass the stream returned by the
   GetResponseStream() method to XmlReader. Fast write-only functions are
   provided by XmlTextWriter.

   With .NET 2.0 you should create XmlReader instances using the
   System.Xml.XmlReader.Create method. For the sake of compatibility and
   clarity the next sample uses the .NET 1.1 creation method.

VB.NET XmlReader Sample


   		Imports System.Xml________________________________________
   ____________________________________________________________
   		' Retrieve XML document___________________________________
   		Dim reader As XmlTextReader = New XmlTextReader( _________
   				"http://xml.weather.yahoo.com/forecastrss?p=94704")_____
   ____________________________________________________________
   		' Skip non-significant whitespace_________________________
   		reader.WhitespaceHandling = WhitespaceHandling.Significant
   ____________________________________________________________
   		' Read nodes one at a time________________________________
   		While reader.Read()_______________________________________
   ____________________________________________________________
   			' Print out info on node_________________________________
   			Console.WriteLine("{0}: {1}", reader.NodeType.ToString(),
   ____________________________________________________________
   		End While_________________________________________________

Using XmlDocument

   XmlDocument gives more flexibility and is a good choice if you need to
   navigate or modify the data via the DOM. It also works as a source for
   the XslTransform class allowing you to perform XSL transformations.

VB.NET XmlDocument Sample


   		Dim doc As XmlDocument____________________________________
   		Dim ns As XmlNamespaceManager_____________________________
   		Dim nodes As XmlNodeList__________________________________
   ____________________________________________________________
   		' Create a new XmlDocument________________________________
   		doc = New XmlDocument()___________________________________
   ____________________________________________________________
   		' Load data_______________________________________________
   		doc.Load("http://xml.weather.yahoo.com/forecastrss?p=94704
   ____________________________________________________________
   		' Set up namespace manager for XPath______________________
   		ns = New XmlNamespaceManager(doc.NameTable)_______________
   		ns.AddNamespace("yweather", "http://xml.weather.yahoo.com/
   ____________________________________________________________
   		' Get forecast with XPath_________________________________
   		nodes = doc.SelectNodes("/rss/channel/item/yweather:foreca
   ____________________________________________________________
   		' You can also get elements based on their tag name and na
   		' though this isn't recommended___________________________
   		'nodes = doc.GetElementsByTagName("forecast", ____________
   		'							"http://xml.weather.yahoo.com/ns/rss/1.0")________
   ____________________________________________________________
   		For Each node As XmlNode In nodes_________________________
   			Console.WriteLine("{0}: {1}, {2}F - {3}F", ______________
   			  node.Attributes("day").InnerText, _____________________
   			  node.Attributes("text").InnerText, ____________________
   			  node.Attributes("low").InnerText, _____________________
   			  node.Attributes("high").InnerText)_____________________
   		Next______________________________________________________

Using XPathNavigator/XPathDocument

   XPathDocument provides fast, read-only access to the contents of an XML
   document using XPath. Its usage is similar to using XPath with
   XmlDocument.

VB.NET XPathDocument Sample


   		Imports System.Xml.XPath__________________________________
   ____________________________________________________________
   		Dim doc As XPathDocument__________________________________
   		Dim ns As XmlNamespaceManager_____________________________
   		Dim navigator As XPathNavigator___________________________
   		Dim nodes As XPathNodeIterator____________________________
   		Dim node As XPathNavigator________________________________
   ____________________________________________________________
   		' Create a new XmlDocument________________________________
   		doc = New XPathDocument("http://xml.weather.yahoo.com/fore
   ____________________________________________________________
   		' Create navigator________________________________________
   		navigator = doc.CreateNavigator()_________________________
   ____________________________________________________________
   		' Set up namespace manager for XPath______________________
   		ns = New XmlNamespaceManager(navigator.NameTable)_________
   		ns.AddNamespace("yweather", "http://xml.weather.yahoo.com/
   ____________________________________________________________
   		' Get forecast with XPath_________________________________
   		nodes = navigator.Select("/rss/channel/item/yweather:forec
   ____________________________________________________________
   		While nodes.MoveNext()____________________________________
   			node = nodes.Current_____________________________________
   ____________________________________________________________
   			Console.WriteLine("{0}: {1}, {2}F - {3}F", ______________
   			   node.GetAttribute("day", ns.DefaultNamespace), _______
   			   node.GetAttribute("text", ns.DefaultNamespace), ______
   			   node.GetAttribute("low", ns.DefaultNamespace), _______
   			   node.GetAttribute("high", ns.DefaultNamespace))_______
   		End While_________________________________________________

Using a DataSet

   Using a DataSet from the System.Data namespace lets you bind the
   returned data to controls and also access hierarchical data easily. A
   dataset can infer the structure automatically from XML, create
   corresponding tables and relationships between them and populate the
   tables just by calling ReadXml().

VB.NET DataSet Sample


   	Imports System.Data________________________________________
   ____________________________________________________________
   	Public Shared Sub DataSetSample1()_________________________
   ____________________________________________________________
   		Dim request As HttpWebRequest_____________________________
   		Dim response As HttpWebResponse = Nothing_________________
   		Dim dsWeather As DataSet__________________________________
   ____________________________________________________________
   		Try_______________________________________________________
   			' Create the web request_________________________________
   			request = DirectCast(WebRequest.Create( _________________
   			 "http://xml.weather.yahoo.com/forecastrss?p=94704"), Htt
   ____________________________________________________________
   			' Get response___________________________________________
   			response = DirectCast(request.GetResponse(), HttpWebRespo
   ____________________________________________________________
   			' Load data into a dataset_______________________________
   			dsWeather = New DataSet()________________________________
   			dsWeather.ReadXml(response.GetResponseStream())__________
   ____________________________________________________________
   			' Print dataset information______________________________
   			PrintDataSet(dsWeather)__________________________________
   		Finally___________________________________________________
   			If Not response Is Nothing Then response.Close()_________
   		End Try___________________________________________________
   ____________________________________________________________
   	End Sub____________________________________________________
   ____________________________________________________________
   	Public Shared Sub PrintDataSet(ByVal ds As DataSet)________
   ____________________________________________________________
   		' Print out all tables and their columns__________________
   		For Each table As DataTable In ds.Tables__________________
   			Console.WriteLine("TABLE '{0}'", table.TableName)________
   			Console.WriteLine("Total # of rows: {0}", table.Rows.Coun
   			Console.WriteLine("--------------------------------------
   ____________________________________________________________
   			For Each column As DataColumn In table.Columns___________
   				Console.WriteLine("- {0} ({1})", column.ColumnName, colu
   			Next  ' For Each column__________________________________
   ____________________________________________________________
   			Console.WriteLine(System.Environment.NewLine)____________
   		Next  ' For Each table____________________________________
   ____________________________________________________________
   		' Print out table relations_______________________________
   		For Each relation As DataRelation In ds.Relations_________
   			Console.WriteLine("RELATION: {0}", relation.RelationName)
   			Console.WriteLine("--------------------------------------
   			Console.WriteLine("Parent: {0}", relation.ParentTable.Tab
   			Console.WriteLine("Child: {0}", relation.ChildTable.Table
   			Console.WriteLine(System.Environment.NewLine)____________
   		Next  ' For Each relation_________________________________
   ____________________________________________________________
   	End Sub____________________________________________________

Further reading

   Related information on the web is listed below.
     * [23]XmlReader Class documentation
     * [24]XmlDocument Class documentation
     * [25]XPathDocument Class documentation
     * [26]Employing XML in the .NET Framework
     * [27]XML in .NET: .NET Framework XML Classes Offer Simple, Scalable
       Data Manipulation
     * [28]XML and the DataSet (.NET Framework Developer's Guide)
     * [29]XML and SOAP Serialization (.NET Framework Developer's Guide)
     * [30]XML Schema Definition Tool (Xsd.exe) (.NET Framework)

Yahoo Forum Discussions

     * [31]Products
     * [32]Blog
     * [33]Forums
     * [34]My Apps
     * [35]Careers
     * [36]Privacy
     * [37]Terms

   Follow us on
     *
     *
     *
     *
     *

References

   Visible links
   1. https://www.yahoo.com/
   2. https://mail.yahoo.com/
   3. http://news.yahoo.com/
   4. http://sports.yahoo.com/
   5. http://finance.yahoo.com/
   6. https://weather.yahoo.com/
   7. https://games.yahoo.com/
   8. https://groups.yahoo.com/
   9. https://answers.yahoo.com/
  10. https://screen.yahoo.com/
  11. https://www.flickr.com/
  12. https://mobile.yahoo.com/
  13. https://everything.yahoo.com/
  14. https://developer.apps.yahoo.com/
  15. https://login.yahoo.com/config/login?.done=https://developer.yahoo.com
  16. https://developer.yahoo.com/dotnet/howto-xml_vb.html#overview
  17. https://developer.yahoo.com/dotnet/howto-xml_vb.html#string
  18. https://developer.yahoo.com/dotnet/howto-xml_vb.html#xmlreader
  19. https://developer.yahoo.com/dotnet/howto-xml_vb.html#xmldocument
  20. https://developer.yahoo.com/dotnet/howto-xml_vb.html#xpath
  21. https://developer.yahoo.com/dotnet/howto-xml_vb.html#dataset
  22. https://developer.yahoo.com/dotnet/howto-xml_vb.html#further
  23. http://msdn.microsoft.com/en-us/library/system.xml.xmlreader.aspx
  24. http://msdn.microsoft.com/en-us/library/system.xml.xmlreader.aspx
  25. http://msdn.microsoft.com/en-us/library/system.xml.xpath.xpathdocument.aspx
  26. http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconemployingxmlinnetframework.asp
  27. http://msdn.microsoft.com/msdnmag/issues/01/01/xml/default.aspx
  28. http://msdn.microsoft.com/library/en-us/cpguide/html/cpconxmldataset.asp
  29. http://msdn.microsoft.com/library/en-us/cpguide/html/cpconSerialization.asp
  30. http://msdn.microsoft.com/en-us/library/x6c1kb0s(VS.80).aspx
  31. https://developer.yahoo.com/everything.html
  32. http://yahoodevelopers.tumblr.com/
  33. https://developer.yahoo.com/forums
  34. https://developer.apps.yahoo.com/
  35. http://yhoo.it/1iLIFlr
  36. https://info.yahoo.com/privacy/us/yahoo/devel/details.html
  37. https://info.yahoo.com/legal/us/yahoo/api/api-2140.html

   Hidden links:
  39. https://developer.yahoo.com/
  40. http://yahoodevelopers.tumblr.com/
  41. https://twitter.com/ydn
  42. https://www.facebook.com/yahoodevelopernetwork
  43. https://github.com/yahoo
  44. https://www.youtube.com/user/ydntheater
